<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【射影几何·（伪）】学习笔记---pycharm配置anaconda环境与numpy的基本使用</title>
      <link href="/2021/09/17/20200916/"/>
      <url>/2021/09/17/20200916/</url>
      
        <content type="html"><![CDATA[<h1 id="【射影几何·（伪）】学习笔记—pycharm配置anaconda环境与numpy的基本使用"><a href="#【射影几何·（伪）】学习笔记—pycharm配置anaconda环境与numpy的基本使用" class="headerlink" title="【射影几何·（伪）】学习笔记—pycharm配置anaconda环境与numpy的基本使用"></a>【射影几何·（伪）】学习笔记—pycharm配置anaconda环境与numpy的基本使用</h1><hr><p>&emsp;&emsp;起因：开了一门射影几何课程，但是由于课程要求不得不重拾python，因为要使用numpy这个包，老师推荐使用了anaconda这个集成环境来整，maybe后期需要用到tensorflow吧。鉴于老师上课时推荐用markdown记录笔记，刚好有机会记录一下吧，不定期更新。<br><img src="https://img-blog.csdnimg.cn/ce2382bc2a5a45e393913df8b550def4.png?x-oss-process=image"></p><hr><h2 id="环境的配置（pycharm-anaconda）"><a href="#环境的配置（pycharm-anaconda）" class="headerlink" title="环境的配置（pycharm+anaconda）"></a>环境的配置（pycharm+anaconda）</h2><ol><li>首先下载好pycharm与anaconda，如果下载anaconda很慢的话建议使用<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">THU的镜像源（click here）</a>。</li><li>各种安装略去不讲，强调千万不要把anaconda放在C盘，后果只有一个就是C盘有一天会被榨干，这个时亲身教训。当然记住你把anaconda安装在哪里了。</li><li>打开pycharm：（1）新建项目，纯python的项目（2）这里是项目所在的位置，随便选个地方就行（3）选择用现有解释器，注意：绿框里的不用管！因为不需要建立虚拟环境，anaconda下载好后已经给你建好了一个叫base的环境。（4）选择刚刚你安装anaconda的位置（见下图），选择里面的python.exe之后点击确定。之后create就配置好了。<br><img src="https://img-blog.csdnimg.cn/eb54e03513e34ccb88041a728aa0b2f8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAc2FiZXItLWV4Y2FsaWJ1cg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="跟着步骤走"><br><img src="https://img-blog.csdnimg.cn/1d3a2f27c57145b0a83bec9a2174f973.png?x-oss-process=image#pic_center=400x600" alt="点击anaconda文件夹下的python.exe"></li><li>打开console或者中文是终端，当输入<code>pip list</code>时会发现已经安装了一堆包，这时就是配置成功了。</li></ol><p><img src="https://img-blog.csdnimg.cn/2309f23a1c9a43fbb455c998cf2de620.png?x-oss-process=image#pic_center=400x600" alt="在这里插入图片描述"></p><h2 id="首先是python的回顾"><a href="#首先是python的回顾" class="headerlink" title="首先是python的回顾"></a>首先是python的回顾</h2><hr><p>忘得有些快，所以写个小回顾（借鉴了一位同学的教程）</p><hr><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>像大多数语言一样，Python 具有许多基本类型，包括整数，浮点数（1.0），布尔值（true and false）和字符串（“我要放假”）。这些数据类型以其他编程语言所熟悉的方式运行。</p><h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h4><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Prints "&lt;class 'int'>"           #打印x的类型（int）</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># Prints "3"                       #打印x的值（3）</span><span class="token keyword">print</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># Addition; prints "4"            #打印（x+1）</span><span class="token keyword">print</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># Subtraction; prints "2"</span><span class="token keyword">print</span><span class="token punctuation">(</span>x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># Multiplication; prints "6"</span><span class="token keyword">print</span><span class="token punctuation">(</span>x <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Exponentiation; prints "9"</span>x <span class="token operator">+=</span> <span class="token number">1</span>                                         <span class="token comment" spellcheck="true">#x=x+1的省略写法</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Prints "4"</span>x <span class="token operator">*=</span> <span class="token number">2</span>                                         <span class="token comment" spellcheck="true">#x=x*2的省略写法</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Prints "8"</span>y <span class="token operator">=</span> <span class="token number">2.5</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Prints "&lt;class 'float'>"</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> y <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Prints "2.5 3.5 5.0 6.25"</span></code></pre><p>请注意，与许多语言不同，Python没有一元的增量（<code>x++</code>）或减量（<code>x--</code>）运算符。<em><strong>用多了java就改不回来了。</strong></em></p><p>Python还具有用于复数的内置类型。您可以<a href="https://docs.python.org/3.5/library/stdtypes.html#numeric-types-int-float-complex">Python 官方文档</a>找到所有详细信息 。</p><h4 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h4><p>Python 布尔类型的逻辑实现通过英语字符单词<code>True</code>和<code>False</code>而非符号（<code>&amp;&amp;</code>，<code>||</code>等）</p><pre class=" language-python"><code class="language-python">t <span class="token operator">=</span> <span class="token boolean">True</span>f <span class="token operator">=</span> <span class="token boolean">False</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Prints "&lt;class 'bool'>"        #打印t的类型</span><span class="token keyword">print</span><span class="token punctuation">(</span>t <span class="token operator">and</span> f<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Logical AND; prints "False"    #逻辑与（且）（真且假这里为假）</span><span class="token keyword">print</span><span class="token punctuation">(</span>t <span class="token operator">or</span> f<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Logical OR; prints "True"        #逻辑或（真或假这里为或）</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">not</span> t<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># Logical NOT; prints "False"    #逻辑否（True的否定是False）</span><span class="token keyword">print</span><span class="token punctuation">(</span>t <span class="token operator">!=</span> f<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Logical XOR; prints "True"        #判断（True！=False是真命题）</span></code></pre><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><pre class=" language-python"><code class="language-python">hello <span class="token operator">=</span> <span class="token string">'hello'</span>    <span class="token comment" spellcheck="true"># String literals can use single quotes</span>world <span class="token operator">=</span> <span class="token string">"world"</span>    <span class="token comment" spellcheck="true"># or double quotes; it does not matter.</span><span class="token comment" spellcheck="true">#字符串可以使用单引号或者双引号括起来</span><span class="token keyword">print</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># Prints "hello"</span><span class="token comment" spellcheck="true">#把变量hello所代表的字符串(hello)打印出来</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># String length; prints "5"</span><span class="token comment" spellcheck="true">#打印字符串hello的长度</span>hw <span class="token operator">=</span> hello <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> world  <span class="token comment" spellcheck="true"># String concatenation</span><span class="token keyword">print</span><span class="token punctuation">(</span>hw<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># prints "hello world"</span><span class="token comment" spellcheck="true">#hw这个字符串是由hello和空格(' ')和world组合起来的</span>hw12 <span class="token operator">=</span> <span class="token string">'%s %s %d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>hello<span class="token punctuation">,</span> world<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># sprintf style string formatting</span><span class="token keyword">print</span><span class="token punctuation">(</span>hw12<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># prints "hello world 12"</span><span class="token comment" spellcheck="true">#%s %d是占位符，s是string代表字符串，d代表整数，与后面的变量依次关联。</span></code></pre><p>字符串对象有很多有用的方法（函数），例如：</p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Capitalize a string; prints "Hello"</span><span class="token comment" spellcheck="true">#字符串第一个字母小写变大写</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#字符串中所有单词的首字母小写变大写</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># Convert a string to uppercase; prints "HELLO"</span><span class="token comment" spellcheck="true">#小写字母变成大写字母</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># Right-justify a string, padding with spaces; prints "  hello"</span><span class="token comment" spellcheck="true">#字符串右对齐，用空格填充。</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># Center a string, padding with spaces; prints " hello "</span><span class="token comment" spellcheck="true">#字符串居中，用空格填充。</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'(ell)'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Replace all instances of one substring with another;prints "he(ell)(ell)o"</span><span class="token comment" spellcheck="true">#字符替换函数 字符串中的字符l被(ell)替换</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'  world '</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Strip leading and trailing whitespace; prints "world"</span><span class="token comment" spellcheck="true">#去除开头和结尾的空格</span></code></pre><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>Python内置多种容器类型：列表、字典、集合、元组。</p><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>Python列表类似于java中的数组，但是列表可以调整大小，里面的成员也可以是不同的类型。而且可以直接打印，<del>所以比java简单多了！</del> </p><pre class=" language-python"><code class="language-python">xs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># Create a list</span><span class="token comment" spellcheck="true">#创建列表</span><span class="token keyword">print</span><span class="token punctuation">(</span>xs<span class="token punctuation">,</span> xs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Prints "[3, 1, 2] 2"</span><span class="token comment" spellcheck="true">#打印列表中的第三个成员(xs[0] xs[1] xs[2]中的xs[2])</span><span class="token keyword">print</span><span class="token punctuation">(</span>xs<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># Negative indices count from the end of the list; prints "2"</span><span class="token comment" spellcheck="true">#第-1号元素表示列表的最后一个元素</span>xs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'foo'</span>     <span class="token comment" spellcheck="true"># Lists can contain elements of different types</span><span class="token comment" spellcheck="true">#同一列表的不同元素可以是不同类型 例如当前的xs列表中前两元素xs[0] xs[1]为int型 xs[2]为字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>xs<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># Prints "[3, 1, 'foo']"</span><span class="token comment" spellcheck="true">#可以打印整个列表</span>xs<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Add a new element to the end of the list</span><span class="token comment" spellcheck="true">#append函数可以在列表末尾加入新成员</span><span class="token keyword">print</span><span class="token punctuation">(</span>xs<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># Prints "[3, 1, 'foo', 'bar']"</span>x <span class="token operator">=</span> xs<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># Remove and return the last element of the list</span><span class="token comment" spellcheck="true">#pop函数会删除列表的最后一个元素并且把这个元素返回(这里我们用变量x接收这个最后一个元素'bar')</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> xs<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># Prints "bar [3, 1, 'foo']"</span><span class="token comment" spellcheck="true">#(这里进行了测试打印)</span></code></pre><p>了解更多细节： <a href="https://docs.python.org/3.5/tutorial/datastructures.html#more-on-lists">官方文档</a>.</p><h5 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h5><p>除了一次访问一个列表元素外，Python还提供了简洁的语法来访问子列表。这称为切片：（最为魔幻的功能）</p><pre class=" language-python"><code class="language-python">nums <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># range is a built-in function that creates a list of integers</span><span class="token comment" spellcheck="true">#这里创建了一个大小是5的列表(默认元素0 1 2 3 4)</span><span class="token keyword">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># Prints "[0, 1, 2, 3, 4]"</span><span class="token keyword">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># Get a slice from index 2 to 4 (exclusive); prints "[2, 3]"</span><span class="token comment" spellcheck="true">#这里获得了一个从第2号元素(包含)到第四号元素(不包含)的切片 类似于数学中的[2,4)</span><span class="token keyword">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># Get a slice from index 2 to the end; prints "[2, 3, 4]"</span><span class="token comment" spellcheck="true">#这里获得了一个从第2号元素(包含)到最后一个元素的列表切片</span><span class="token keyword">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># Get a slice from the start to index 2 (exclusive); prints "[0, 1]"</span><span class="token comment" spellcheck="true">#这里获得了一个从开始到第2号元素(不包含)的切片。</span><span class="token keyword">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># Get a slice of the whole list; prints "[0, 1, 2, 3, 4]"</span><span class="token comment" spellcheck="true">#获得了一个包含整个列表的切片(copy行为)</span><span class="token keyword">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># Slice indices can be negative; prints "[0, 1, 2, 3]"</span><span class="token comment" spellcheck="true">#切片索引可以为负</span>nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># Assign a new sublist to a slice</span><span class="token comment" spellcheck="true">#将新的子列表分配给切片</span><span class="token keyword">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># Prints "[0, 1, 8, 9, 4]"</span></code></pre><h5 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h5><p>循环：您可以像这样循环遍历列表的元素：</p><pre class=" language-python"><code class="language-python">animals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'monkey'</span><span class="token punctuation">]</span><span class="token keyword">for</span> animal <span class="token keyword">in</span> animals<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Prints "cat", "dog", "monkey", each on its own line.</span><span class="token comment" spellcheck="true">#这里我们使用for关键字循环遍历列表 animals，我们记列表 animals 中的每个成员为animal，通过语句 ‘for animal in animals’ 访问其中的每个 animal,在每次循环时打印这个animal.</span></code></pre><p>如果您要访问循环体内每个元素的索引，可以使用内置的<code>enumrate</code>方法：</p><pre class=" language-python"><code class="language-python">animals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'monkey'</span><span class="token punctuation">]</span><span class="token keyword">for</span> idx<span class="token punctuation">,</span> animal <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>animals<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'#%d: %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>idx<span class="token punctuation">,</span> animal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Prints "#0: cat", "#1: dog", "#2: monkey", each on its own line</span><span class="token comment" spellcheck="true">#这里的idx其实是每个animal的索引 0对应cat、1对应dog、2对应monkey.我们使用语句‘for idx, animal in enumerate(animals):’访问其中的索引和成员(键值对)并且在每次循环时一并打印出来。</span></code></pre><h5 id="灵活运用（各种奇葩的优化）"><a href="#灵活运用（各种奇葩的优化）" class="headerlink" title="灵活运用（各种奇葩的优化）"></a>灵活运用（各种奇葩的优化）</h5><p>在编程时，我们经常希望将一种数据类型转换为另一种数据类型。作为一个简单的示例，请考虑以下计算平方数的代码：</p><pre class=" language-python"><code class="language-python">nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>squares <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> x <span class="token keyword">in</span> nums<span class="token punctuation">:</span>    squares<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>squares<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># Prints [0, 1, 4, 9, 16]</span><span class="token comment" spellcheck="true">#设计思路：获取 nums 列表中的元素并且将其平方后添加到列表 squares 中</span></code></pre><p>减少代码量的优化：</p><pre class=" language-python"><code class="language-python">nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>squares <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token operator">**</span> <span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> nums<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>squares<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># Prints [0, 1, 4, 9, 16]</span></code></pre><p>列表推导也可以包含条件：</p><pre class=" language-python"><code class="language-python">nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>even_squares <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token operator">**</span> <span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> nums <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>even_squares<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Prints "[0, 4, 16]"</span><span class="token comment" spellcheck="true">#这里我们只获取偶数的平方</span></code></pre><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><p>字典存储（键，值）对，类似于Java中的Map或Javascript中的对象。您可以像这样使用它：</p><pre class=" language-python"><code class="language-python">d <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'cat': 'cute', 'dog': 'furry'&amp;#125;  # Create a new dictionary with some data</span><span class="token comment" spellcheck="true">#建立了一个字典d 这里可以看出字典是由键值对组成的 cat(键)对应cute(值)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># Get an entry from a dictionary; prints "cute"</span><span class="token comment" spellcheck="true">#通过键打印值</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'cat'</span> <span class="token keyword">in</span> d<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># Check if a dictionary has a given key; prints "True"</span><span class="token comment" spellcheck="true">#检查字典d中是否包含某个键cat，这里打印出True</span>d<span class="token punctuation">[</span><span class="token string">'fish'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'wet'</span>     <span class="token comment" spellcheck="true"># Set an entry in a dictionary</span><span class="token comment" spellcheck="true">#在d中加入条目fish-wet</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span><span class="token string">'fish'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># Prints "wet"</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span><span class="token string">'monkey'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># KeyError: 'monkey' not a key of d</span><span class="token comment" spellcheck="true">#访问不存在的键会报错的</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'monkey'</span><span class="token punctuation">,</span> <span class="token string">'N/A'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Get an element with a default; prints "N/A"</span><span class="token comment" spellcheck="true">#获取具有默认值的元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'fish'</span><span class="token punctuation">,</span> <span class="token string">'N/A'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Get an element with a default; prints "wet"</span><span class="token comment" spellcheck="true">#获取具有默认值的元素</span><span class="token keyword">del</span> d<span class="token punctuation">[</span><span class="token string">'fish'</span><span class="token punctuation">]</span>         <span class="token comment" spellcheck="true"># Remove an element from a dictionary</span><span class="token comment" spellcheck="true">#del 关键字会根据键参数(fish)在字典中删除该条目</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'fish'</span><span class="token punctuation">,</span> <span class="token string">'N/A'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># "fish" is no longer a key; prints "N/A"</span></code></pre><p>更多信息：<a href="https://docs.python.org/3.5/library/stdtypes.html#dict">官方文档</a>.</p><h5 id="循环-1"><a href="#循环-1" class="headerlink" title="循环"></a>循环</h5><p>迭代字典中的键很容易：</p><pre class=" language-python"><code class="language-python">d <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'person': 2, 'cat': 4, 'spider': 8&amp;#125;</span><span class="token keyword">for</span> animal <span class="token keyword">in</span> d<span class="token punctuation">:</span>    legs <span class="token operator">=</span> d<span class="token punctuation">[</span>animal<span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A %s has %d legs'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>animal<span class="token punctuation">,</span> legs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Prints "A person has 2 legs", "A cat has 4 legs", "A spider has 8 legs"</span><span class="token comment" spellcheck="true">#animal 是字典d中的键，我们通过角标(d[])将其值得到并且赋值给变量legs最终打印出键和值。</span></code></pre><p>如果要访问键及其对应的值，请使用<code>items</code>方法：</p><pre class=" language-python"><code class="language-python">d <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'person': 2, 'cat': 4, 'spider': 8&amp;#125;</span><span class="token keyword">for</span> animal<span class="token punctuation">,</span> legs <span class="token keyword">in</span> d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A %s has %d legs'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>animal<span class="token punctuation">,</span> legs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Prints "A person has 2 legs", "A cat has 4 legs", "A spider has 8 legs"</span><span class="token comment" spellcheck="true">#item方法有两个键和值两个返回值 我们这里使用animal和legs两个变量接收</span></code></pre><h5 id="灵活运用"><a href="#灵活运用" class="headerlink" title="灵活运用"></a>灵活运用</h5><p>这与列表运用类似，可让您轻松构造字典。例如：</p><pre class=" language-python"><code class="language-python">nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>even_num_to_square <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;x: x ** 2 for x in nums if x % 2 == 0&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>even_num_to_square<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Prints "&amp;#123;0: 0, 2: 4, 4: 16&amp;#125;"</span></code></pre><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><p>集合是不同元素的无序集合。作为一个简单的示例，请考虑以下内容：</p><pre class=" language-python"><code class="language-python">animals <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'cat', 'dog'&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'cat'</span> <span class="token keyword">in</span> animals<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># Check if an element is in a set; prints "True"</span><span class="token comment" spellcheck="true">#检查集合animals中是否有成员cat，这里返回True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'fish'</span> <span class="token keyword">in</span> animals<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># prints "False"</span><span class="token comment" spellcheck="true">#检查集合animals中是否有成员fish，这里返回False</span>animals<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'fish'</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># Add an element to a set</span><span class="token comment" spellcheck="true">#添加成员fish进入集合animals</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'fish'</span> <span class="token keyword">in</span> animals<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Prints "True"</span><span class="token comment" spellcheck="true">#检查集合animals中是否有成员fish，这里返回True</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>animals<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># Number of elements in a set; prints "3"</span><span class="token comment" spellcheck="true">#通过len关键字打印集合animals中的成员个数</span>animals<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'cat'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Adding an element that is already in the set does nothing</span><span class="token comment" spellcheck="true">#向集合中增加一个已经存在的成员则什么也不会发生</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>animals<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># Prints "3"</span><span class="token comment" spellcheck="true">#果然什么也没有用发生</span>animals<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'cat'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># Remove an element from a set</span><span class="token comment" spellcheck="true">#remove方法可以删除集合中的成员</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>animals<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># Prints "2"</span><span class="token comment" spellcheck="true">#果然删除了</span></code></pre><p>了解更多：<a href="https://docs.python.org/3.5/library/stdtypes.html#set">官方文档</a>.</p><h5 id="循环-2"><a href="#循环-2" class="headerlink" title="循环"></a>循环</h5><p>在集合上进行迭代与在列表上进行迭代具有相同的语法。但是，由于集合是无序的，因此无法假设访问集合元素的顺序：</p><pre class=" language-python"><code class="language-python">animals <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'cat', 'dog', 'fish'&amp;#125;</span><span class="token keyword">for</span> idx<span class="token punctuation">,</span> animal <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>animals<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'#%d: %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>idx<span class="token punctuation">,</span> animal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Prints "#0: fish", "#1: dog", "#2: cat"</span></code></pre><h5 id="灵活使用"><a href="#灵活使用" class="headerlink" title="灵活使用"></a>灵活使用</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> math <span class="token keyword">import</span> sqrt<span class="token comment" spellcheck="true">#这里从math中导入了sqrt方法</span>nums <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;int(sqrt(x)) for x in range(30)&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Prints "&amp;#123;0, 1, 2, 3, 4, 5&amp;#125;"</span><span class="token comment" spellcheck="true">#这里我们使用sqrt方法求平方根，把所有结果转化成整数加入到集合nums中，最终进行了打印。</span></code></pre><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><p>元组是（不可变的）有序值列表。元组在很多方面都类似于列表。最重要的区别之一是元组可以用作字典中的键和集合的元素，而列表则不能。示例：</p><pre class=" language-python"><code class="language-python">d <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;(x, x + 1): x for x in range(10)&amp;#125;  # Create a dictionary with tuple keys</span><span class="token comment" spellcheck="true">#这里我们使用元组作为键生成了一个字典</span>t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Create a tuple</span><span class="token comment" spellcheck="true">#生成元组我们使用小括号，并且用 , 分割元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Prints "&lt;class 'tuple'>"</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># Prints "5"</span><span class="token comment" spellcheck="true">#相当于d[(5,6)],键(5,6)对应的值是5</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Prints "1"</span><span class="token comment" spellcheck="true">#同上</span></code></pre><p>更多信息：<a href="https://docs.python.org/3.5/tutorial/datastructures.html#tuples-and-sequences">官方文档</a></p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>我们使用关键字<code>def</code>声明创建一个函数，例如：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sign</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> x <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'positive'</span>    <span class="token keyword">elif</span> x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'negative'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'zero'</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sign<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Prints "negative", "zero", "positive"</span><span class="token comment" spellcheck="true">#我们创建了一个函数 sign,这个函数传入一个参数x，根据x正负性传出positive\negative\zero的结果</span></code></pre><p>我们经常会定义函数以接受可选的关键字参数，例如：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> loud<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> loud<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'HELLO, %s!'</span> <span class="token operator">%</span> name<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, %s'</span> <span class="token operator">%</span> name<span class="token punctuation">)</span>hello<span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Prints "Hello, Bob"</span>hello<span class="token punctuation">(</span><span class="token string">'Fred'</span><span class="token punctuation">,</span> loud<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Prints "HELLO, FRED!"</span><span class="token comment" spellcheck="true">#这里的参数loud就是一个可选参数(默认是布尔类型的false),当第二次调用hello函数时我们传入了loud参数为True所以产生了不同的效果</span></code></pre><p>更多信息：<a href="https://docs.python.org/3.5/tutorial/controlflow.html#defining-functions">官方文档</a></p><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>这部分参考廖雪峰教程，<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017496031185408">原文</a></p><p>面向对象最重要的概念就是类（Class）和实例（Instance），必须牢记类是抽象的模板，比如Greeter类，而实例是根据类创建出来的一个个具体的“对象”，每个对象都拥有相同的方法，但各自的数据可能不同。</p><p>在Python中定义类的语法很简单，例如：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Greeter</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#构造函数</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token comment" spellcheck="true">#创建一个实例变量</span>    <span class="token comment" spellcheck="true">#实例方法</span>    <span class="token keyword">def</span> <span class="token function">greet</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> loud<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> loud<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'HELLO, %s!'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, %s'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>g <span class="token operator">=</span> Greeter<span class="token punctuation">(</span><span class="token string">'Fred'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 构造一个Greeter类的实例</span>g<span class="token punctuation">.</span>greet<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 调用实例g的greet方法; prints "Hello, Fred"</span>g<span class="token punctuation">.</span>greet<span class="token punctuation">(</span>loud<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 调用实例g的greet方法(可选参数为True类型); prints "HELLO, FRED!"</span></code></pre><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>在Python中，定义类是通过<code>class</code>关键字：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre><p><code>class</code>后面紧接着是类名，即<code>Student</code>，类名通常是大写开头的单词，紧接着是<code>(object)</code>，表示该类是从哪个类继承下来的，继承的概念我们后面再讲，通常，如果没有合适的继承类，就使用<code>object</code>类，这是所有类最终都会继承的类。</p><h4 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h4><p>定义好了<code>Student</code>类，就可以根据<code>Student</code>类创建出<code>Student</code>的实例，创建实例是通过类名+()实现的：</p><pre class=" language-python"><code class="language-python">    bart <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span>        bart<span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>Student object at <span class="token number">0x10a67a590</span><span class="token operator">></span>    Student<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'__main__.Student'</span><span class="token operator">></span></code></pre><p>可以看到，变量<code>bart</code>指向的就是一个<code>Student</code>的实例，后面的<code>0x10a67a590</code>是内存地址，每个object的地址都不一样，而<code>Student</code>本身则是一个类。</p><p>可以自由地给一个实例变量绑定属性，比如，给实例<code>bart</code>绑定一个<code>name</code>属性：</p><pre class=" language-python"><code class="language-python">    bart<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Bart Simpson'</span>    bart<span class="token punctuation">.</span>name<span class="token string">'Bart Simpson'</span></code></pre><p>由于类可以起到模板的作用，因此，可以在创建实例的时候，把一些我们认为必须绑定的属性强制填写进去。通过定义一个特殊的<code>__init__</code>方法，在创建实例的时候，就把<code>name</code>，<code>score</code>等属性绑上去：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>score <span class="token operator">=</span> score</code></pre><p> <strong>注意：特殊方法“__init__”前后分别有两个下划线！！！</strong></p><p>注意到<code>__init__</code>方法的第一个参数永远是<code>self</code>，表示创建的实例本身，因此，在<code>__init__</code>方法内部，就可以把各种属性绑定到<code>self</code>，因为<code>self</code>就指向创建的实例本身。</p><p>有了<code>__init__</code>方法，在创建实例的时候，就不能传入空的参数了，必须传入与<code>__init__</code>方法匹配的参数，但<code>self</code>不需要传，Python解释器自己会把实例变量传进去：</p><pre class=" language-python"><code class="language-python">    bart <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'Bart Simpson'</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">)</span>        bart<span class="token punctuation">.</span>name<span class="token string">'Bart Simpson'</span>    bart<span class="token punctuation">.</span>score<span class="token number">59</span></code></pre><p>和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量<code>self</code>，并且，调用时，不用传递该参数。除此之外，类的方法和普通函数没有什么区别，所以，你仍然可以用默认参数、可变参数、关键字参数和命名关键字参数。</p><h4 id="数据封装"><a href="#数据封装" class="headerlink" title="数据封装"></a>数据封装</h4><p>面向对象编程的一个重要特点就是数据封装。在上面的<code>Student</code>类中，每个实例就拥有各自的<code>name</code>和<code>score</code>这些数据。我们可以通过函数来访问这些数据，比如打印一个学生的成绩：</p><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">print_score</span><span class="token punctuation">(</span>std<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s: %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>std<span class="token punctuation">.</span>name<span class="token punctuation">,</span> std<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">)</span>    print_score<span class="token punctuation">(</span>bart<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># result：Bart Simpson: 59</span></code></pre><p>但是，既然<code>Student</code>实例本身就拥有这些数据，要访问这些数据，就没有必要从外面的函数去访问，可以直接在<code>Student</code>类的内部定义访问数据的函数，这样，就把“数据”给封装起来了。这些封装数据的函数是和<code>Student</code>类本身是关联起来的，我们称之为类的方法：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>score <span class="token operator">=</span> score    <span class="token keyword">def</span> <span class="token function">print_score</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s: %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>要定义一个方法，除了第一个参数是<code>self</code>外，其他和普通函数一样。要调用一个方法，只需要在实例变量上直接调用，除了<code>self</code>不用传递，其他参数正常传入：</p><pre class=" language-python"><code class="language-python">bart<span class="token punctuation">.</span>print_score<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#result:Bart Simpson: 59</span></code></pre><p>这样一来，我们从外部看<code>Student</code>类，就只需要知道，创建实例需要给出<code>name</code>和<code>score</code>，而如何打印，都是在<code>Student</code>类的内部定义的，这些数据和逻辑被“封装”起来了，调用很容易，但却不用知道内部实现的细节。</p><p>封装的另一个好处是可以给<code>Student</code>类增加新的方法，比如<code>get_grade</code>：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">get_grade</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>score <span class="token operator">>=</span> <span class="token number">90</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'A'</span>        <span class="token keyword">elif</span> self<span class="token punctuation">.</span>score <span class="token operator">>=</span> <span class="token number">60</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'B'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'C'</span></code></pre><p>同样的，<code>get_grade</code>方法可以直接在实例变量上调用，不需要知道内部实现细节：</p><p>类的构造：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>score <span class="token operator">=</span> score    <span class="token keyword">def</span> <span class="token function">get_grade</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>score <span class="token operator">>=</span> <span class="token number">90</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'A'</span>        <span class="token keyword">elif</span> self<span class="token punctuation">.</span>score <span class="token operator">>=</span> <span class="token number">60</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'B'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'C'</span></code></pre><p>测试：</p><pre class=" language-python"><code class="language-python">lisa <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'Lisa'</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span>bart <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'Bart'</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lisa<span class="token punctuation">.</span>name<span class="token punctuation">,</span> lisa<span class="token punctuation">.</span>get_grade<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bart<span class="token punctuation">.</span>name<span class="token punctuation">,</span> bart<span class="token punctuation">.</span>get_grade<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>结果：</p><pre><code>Lisa A Bart C </code></pre><h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><p>类是创建实例的模板，而实例则是一个一个具体的对象，各个实例拥有的数据都互相独立，互不影响；</p><p>方法就是与实例绑定的函数，和普通函数不同，方法可以直接访问实例的数据；</p><p>通过在实例上调用方法，我们就直接操作了对象内部的数据，但无需知道方法内部的实现细节。</p><p>和静态语言不同，Python允许对实例变量绑定任何数据，也就是说，对于两个实例变量，虽然它们都是同一个类的不同实例，但拥有的变量名称都可能不同：</p><h4 id="访问限制"><a href="#访问限制" class="headerlink" title="访问限制"></a>访问限制</h4><p>在Class内部，可以有属性和方法，而外部代码可以通过直接调用实例变量的方法来操作数据，这样，就隐藏了内部的复杂逻辑。</p><p>但是，从前面Student类的定义来看，外部代码还是可以自由地修改一个实例的<code>name</code>、<code>score</code>属性：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> bart <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'Bart Simpson'</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> bart<span class="token punctuation">.</span>score<span class="token number">59</span><span class="token operator">>></span><span class="token operator">></span> bart<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">99</span><span class="token operator">>></span><span class="token operator">></span> bart<span class="token punctuation">.</span>score<span class="token number">99</span></code></pre><p>如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线<code>__</code>，在Python中，实例的变量名如果以<code>__</code>开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问，所以，我们把Student类改一改：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>__score <span class="token operator">=</span> score    <span class="token keyword">def</span> <span class="token function">print_score</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s: %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>__name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>__score<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>改完后，对于外部代码来说，没什么变动，但是已经无法从外部访问<code>实例变量.__name</code>和<code>实例变量.__score</code>了：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> bart <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'Bart Simpson'</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> bart<span class="token punctuation">.</span>__nameTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>AttributeError<span class="token punctuation">:</span> <span class="token string">'Student'</span> object has no attribute <span class="token string">'__name'</span></code></pre><p>这样就确保了外部代码不能随意修改对象内部的状态，这样通过访问限制的保护，代码更加健壮。</p><p>但是如果外部代码要获取name和score怎么办？可以给Student类增加<code>get_name</code>和<code>get_score</code>这样的方法：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">get_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__name    <span class="token keyword">def</span> <span class="token function">get_score</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__score</code></pre><p>如果又要允许外部代码修改score怎么办？可以再给Student类增加<code>set_score</code>方法：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">set_score</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__score <span class="token operator">=</span> score</code></pre><h5 id="参数检查"><a href="#参数检查" class="headerlink" title="参数检查"></a>参数检查</h5><p>你也许会问，原先那种直接通过<code>bart.score = 99</code>也可以修改啊，为什么要定义一个方法大费周折？因为在方法中，可以对参数做检查，避免传入无效的参数：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">set_score</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> score <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>__score <span class="token operator">=</span> score        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'bad score'</span><span class="token punctuation">)</span></code></pre><p>需要注意的是，在Python中，变量名类似<code>__xxx__</code>的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是private变量，所以，不能用<code>__name__</code>、<code>__score__</code>这样的变量名。</p><p>有些时候，你会看到以一个下划线开头的实例变量名，比如<code>_name</code>，这样的实例变量外部是可以访问的，但是，按照约定俗成的规定，当你看到这样的变量时，意思就是，“虽然我可以被访问，但是，请把我视为私有变量，不要随意访问”。</p><h4 id="继承与多态"><a href="#继承与多态" class="headerlink" title="继承与多态"></a>继承与多态</h4><h4 id="继承和多态"><a href="#继承和多态" class="headerlink" title="继承和多态"></a>继承和多态</h4><p>在程序设计中，当我们定义一个class的时候，可以从某个现有的class继承，新的class称为子类（Subclass），而被继承的class称为基类、父类或超类（Base class、Super class）。</p><p>比如，我们已经编写了一个名为<code>Animal</code>的class，有一个<code>run()</code>方法可以直接打印：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Animal is running...'</span><span class="token punctuation">)</span></code></pre><p>当我们需要编写<code>Dog</code>和<code>Cat</code>类时，就可以直接从<code>Animal</code>类继承：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre><p>对于<code>Dog</code>来说，<code>Animal</code>就是它的父类，对于<code>Animal</code>来说，<code>Dog</code>就是它的子类。<code>Cat</code>和<code>Dog</code>类似。</p><p>继承有什么好处？最大的好处是子类获得了父类的全部功能。由于<code>Animial</code>实现了<code>run()</code>方法，因此，<code>Dog</code>和<code>Cat</code>作为它的子类，什么事也没干，就自动拥有了<code>run()</code>方法：</p><pre class=" language-python"><code class="language-python">dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>cat <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token punctuation">)</span>cat<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行结果：</p><pre class=" language-python"><code class="language-python">Animal <span class="token keyword">is</span> running<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Animal <span class="token keyword">is</span> running<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>当然，也可以对子类增加一些方法，比如Dog类：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Dog is running...'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Eating meat...'</span><span class="token punctuation">)</span></code></pre><p>继承的第二个好处需要我们对代码做一点改进。你看到了，无论是<code>Dog</code>还是<code>Cat</code>，它们<code>run()</code>的时候，显示的都是<code>Animal is running...</code>，符合逻辑的做法是分别显示<code>Dog is running...</code>和<code>Cat is running...</code>，因此，对<code>Dog</code>和<code>Cat</code>类改进如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Dog is running...'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Cat is running...'</span><span class="token punctuation">)</span></code></pre><p>再次运行，结果如下：</p><pre><code>Dog is running...Cat is running...</code></pre><p>当子类和父类都存在相同的<code>run()</code>方法时，我们说，子类的<code>run()</code>覆盖了父类的<code>run()</code>，在代码运行的时候，总是会调用子类的<code>run()</code>。这样，我们就获得了继承的另一个好处：<strong>多态</strong>。</p><p>要理解什么是多态，我们首先要对数据类型再作一点说明。当我们定义一个class的时候，我们实际上就定义了一种数据类型。我们定义的数据类型和Python自带的数据类型，比如str、list、dict没什么两样：</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># a是list类型</span>b <span class="token operator">=</span> Animal<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># b是Animal类型</span>c <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># c是Dog类型</span></code></pre><p>当我们创建了一个<code>Dog</code>的实例<code>c</code>时，我们认为<code>c</code>的数据类型是<code>Dog</code>没错，但<code>c</code>同时也是<code>Animal</code>也没错，<code>Dog</code>本来就是<code>Animal</code>的一种！</p><p>所以，在继承关系中，如果一个实例的数据类型是某个子类，那它的数据类型也可以被看做是父类。但是，反过来就不行：<code>Dog</code>可以看成<code>Animal</code>，但<code>Animal</code>不可以看成<code>Dog</code>。</p><p>要理解多态的好处，我们还需要再编写一个函数，这个函数接受一个<code>Animal</code>类型的变量：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">run_twice</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    animal<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>    animal<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>当我们传入<code>Animal</code>的实例时，<code>run_twice()</code>就打印出：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> run_twice<span class="token punctuation">(</span>Animal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Animal <span class="token keyword">is</span> running<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Animal <span class="token keyword">is</span> running<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>当我们传入<code>Dog</code>的实例时，<code>run_twice()</code>就打印出：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> run_twice<span class="token punctuation">(</span>Dog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Dog <span class="token keyword">is</span> running<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Dog <span class="token keyword">is</span> running<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>当我们传入<code>Cat</code>的实例时，<code>run_twice()</code>就打印出：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> run_twice<span class="token punctuation">(</span>Cat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Cat <span class="token keyword">is</span> running<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Cat <span class="token keyword">is</span> running<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>看上去没啥意思，但是仔细想想，现在，如果我们再定义一个<code>Tortoise</code>类型，也从<code>Animal</code>派生：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Tortoise</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Tortoise is running slowly...'</span><span class="token punctuation">)</span></code></pre><p>当我们调用<code>run_twice()</code>时，传入<code>Tortoise</code>的实例：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> run_twice<span class="token punctuation">(</span>Tortoise<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Tortoise <span class="token keyword">is</span> running slowly<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Tortoise <span class="token keyword">is</span> running slowly<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>你会发现，新增一个<code>Animal</code>的子类，不必对<code>run_twice()</code>做任何修改，实际上，任何依赖<code>Animal</code>作为参数的函数或者方法都可以不加修改地正常运行，原因就在于多态。</p><p>多态的好处就是，当我们需要传入<code>Dog</code>、<code>Cat</code>、<code>Tortoise</code>……时，我们只需要接收<code>Animal</code>类型就可以了，因为<code>Dog</code>、<code>Cat</code>、<code>Tortoise</code>……都是<code>Animal</code>类型，然后，按照<code>Animal</code>类型进行操作即可。由于<code>Animal</code>类型有<code>run()</code>方法，因此，传入的任意类型，只要是<code>Animal</code>类或者子类，就会自动调用实际类型的<code>run()</code>方法，这就是多态的意思：</p><p>对于一个变量，我们只需要知道它是<code>Animal</code>类型，无需确切地知道它的子类型，就可以放心地调用<code>run()</code>方法，而具体调用的<code>run()</code>方法是作用在<code>Animal</code>、<code>Dog</code>、<code>Cat</code>还是<code>Tortoise</code>对象上，由运行时该对象的确切类型决定，这就是多态真正的威力：调用方只管调用，不管细节，而当我们新增一种<code>Animal</code>的子类时，只要确保<code>run()</code>方法编写正确，不用管原来的代码是如何调用的。这就是著名的“开闭”原则：</p><p>对扩展开放：允许新增<code>Animal</code>子类；</p><p>对修改封闭：不需要修改依赖<code>Animal</code>类型的<code>run_twice()</code>等函数。</p><p>继承还可以一级一级地继承下来，就好比从爷爷到爸爸、再到儿子这样的关系。而任何类，最终都可以追溯到根类object，这些继承关系看上去就像一颗倒着的树。比如如下的继承树：</p><pre class=" language-ascii"><code class="language-ascii">                ┌───────────────┐                │    object     │                └───────────────┘                        │           ┌────────────┴────────────┐           │                         │           ▼                         ▼    ┌─────────────┐           ┌─────────────┐    │   Animal    │           │    Plant    │    └─────────────┘           └─────────────┘           │                         │     ┌─────┴──────┐            ┌─────┴──────┐     │            │            │            │     ▼            ▼            ▼            ▼┌─────────┐  ┌─────────┐  ┌─────────┐  ┌─────────┐ │   Dog   │   │   Cat   │   │  Tree   │  │ Flower  │└─────────┘  └─────────┘  └─────────┘  └─────────┘</code></pre><h5 id="静态语言-vs-动态语言"><a href="#静态语言-vs-动态语言" class="headerlink" title="静态语言 vs 动态语言"></a>静态语言 vs 动态语言</h5><p>对于静态语言（例如Java）来说，如果需要传入<code>Animal</code>类型，则传入的对象必须是<code>Animal</code>类型或者它的子类，否则，将无法调用<code>run()</code>方法。</p><p>对于Python这样的动态语言来说，则不一定需要传入<code>Animal</code>类型。我们只需要保证传入的对象有一个<code>run()</code>方法就可以了：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Start...'</span><span class="token punctuation">)</span></code></pre><p>这就是动态语言的“鸭子类型”，它并不要求严格的继承体系，一个对象只要“看起来像鸭子，走起路来像鸭子”，那它就可以被看做是鸭子。</p><p>Python的“file-like object“就是一种鸭子类型。对真正的文件对象，它有一个<code>read()</code>方法，返回其内容。但是，许多对象，只要有<code>read()</code>方法，都被视为“file-like object“。许多函数接收的参数就是“file-like object“，你不一定要传入真正的文件对象，完全可以传入任何实现了<code>read()</code>方法的对象。</p><h5 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h5><p>继承可以把父类的所有功能都直接拿过来，这样就不必重零做起，子类只需要新增自己特有的方法，也可以把父类不适合的方法覆盖重写。</p><hr><h2 id="numpy的学习"><a href="#numpy的学习" class="headerlink" title="numpy的学习"></a>numpy的学习</h2><p>未完待续。。。。。能打赏吗？？</p>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> numpy </tag>
            
            <tag> 计算机图形学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【读书笔记】《丝绸之路》（二）---宗教的传播与影响</title>
      <link href="/2021/08/25/20210825/"/>
      <url>/2021/08/25/20210825/</url>
      
        <content type="html"><![CDATA[<h1 id="【读书笔记】《丝绸之路》（二）—宗教的传播与影响"><a href="#【读书笔记】《丝绸之路》（二）—宗教的传播与影响" class="headerlink" title="【读书笔记】《丝绸之路》（二）—宗教的传播与影响"></a>【读书笔记】《丝绸之路》（二）—宗教的传播与影响</h1><hr><p>&emsp;&emsp;感谢全历史这个app，提供了一个随时可以查资料的地方<br><img src="https://img-blog.csdnimg.cn/b15af74e1bf04a76b9a91655dd231343.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70#pic_center" alt="继续看"></p><hr><h2 id="一些书外知识"><a href="#一些书外知识" class="headerlink" title="一些书外知识"></a>一些书外知识</h2><h3 id="西亚与中东的关系，以及中亚的范围"><a href="#西亚与中东的关系，以及中亚的范围" class="headerlink" title="西亚与中东的关系，以及中亚的范围"></a>西亚与中东的关系，以及中亚的范围</h3><p>由于一直分不清中东、西亚、中亚是怎么划分的，所以查查资料来弥补一下自己的地理知识。<br><img src="https://img-blog.csdnimg.cn/26522403166a4d1cbaa93e6ce0be19dd.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>&emsp;&emsp;简而言之中东是欧洲人搞出来的人文概念，而西亚是一个地理概念。而中亚一般指现在中亚五国（哈萨克斯坦、乌兹别克斯坦、吉尔吉斯斯坦、塔吉克斯坦、土库曼斯坦）所处的位置。</p><h3 id="丝绸之路的地理概况"><a href="#丝绸之路的地理概况" class="headerlink" title="丝绸之路的地理概况"></a>丝绸之路的地理概况</h3><p>&emsp;&emsp;文明的萌发与成长需要苛刻的条件，而我们现在对中东的印象始终让我认为那里除了沙土就是沙土，不过美索不达米亚平原的文明以及古波斯的辉煌让我发现这显然是自己的孤陋寡闻，于是特地查阅了相关书籍。</p><h4 id="关于中原与新疆地区"><a href="#关于中原与新疆地区" class="headerlink" title="关于中原与新疆地区"></a>关于中原与新疆地区</h4><p>&emsp;&emsp;这些地方都去过，所以就略过了。值得一提的是新疆地区作为一个地理相对封闭的地区，与中原地区仅靠<strong>河西走廊</strong>联系，与西亚取联系必须翻越艰险的帕米尔高原<strong>瓦罕走廊</strong>，当然还有一条游牧民族迁徙的道路就是通过北疆的山口到达中亚地区，再从中亚进入西亚地区。<br><img src="https://img-blog.csdnimg.cn/65c769b88aa74d7a9a26a50618876b31.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="新疆地区为数不多的道路"></p><h4 id="中亚地区"><a href="#中亚地区" class="headerlink" title="中亚地区"></a>中亚地区</h4><p><img src="https://img-blog.csdnimg.cn/cf20330d2b354af989175d03eae7e92d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="看起来很平坦"><br>&emsp;&emsp;看起来很平坦，似乎都是绿色。但显然这里不是沃野千里。由于地处内陆气候极其干燥，部分为荒漠化草原，所以并不是文明适合发展的地方。这种特点使得中亚成为游牧民族的起源地，广阔平原（草原）适合放牧，干燥气候迫使其自行迁徙。又因为他处于连接西亚与中国的节点，所以这里文化、宗教交汇。</p><h4 id="伊朗高原与两河流域"><a href="#伊朗高原与两河流域" class="headerlink" title="伊朗高原与两河流域"></a>伊朗高原与两河流域</h4><p><img src="https://img-blog.csdnimg.cn/310a10d7482e4de3b2a507eb5dd2d193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="伊朗高原的海拔平均只有1000m"></p><blockquote><p>（摘自他人文章） 两河流域沃土千里，水源充沛，气候温暖，诞生了最早的文明，是一个“爱在西元前”的地方，关于它，大家都很熟悉，没什么可说的。这里多说一下伊朗高原。<br>······伊朗高原可以说是高原里最受上天优待的。它的海拔只有1000米，其实是一个被山地包围的盆地，使得它易守难攻，又不太缺氧；比较干旱，但又有雪山融水。从而形成独特而发达的山地文明。<br>······伊朗高原的这种封闭性很好的保护了它的安全。然后伊朗高原又是开放的，在它东南西北四个方向又适时的留出了四个山口。高地民族对低地民族具有天然的地缘优势，这就是波斯帝国和阿拉伯帝国统一中亚和中亚伊斯兰化的基础。<br>······与此同时，中亚游牧民族又可以通过这些山口频繁入侵中东，比如塞尔柱突厥人、蒙古人。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/4fe4cf4c9b95492c8ab686ec439e4f2e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="得天独厚的地势"></p><h4 id="爱琴海沿岸与小亚细亚"><a href="#爱琴海沿岸与小亚细亚" class="headerlink" title="爱琴海沿岸与小亚细亚"></a>爱琴海沿岸与小亚细亚</h4><p><img src="https://img-blog.csdnimg.cn/1c16c92828b64b4db2aebce6136dec83.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="小亚细亚---亚欧之争的隘口"><br>&emsp;&emsp;小亚细亚处于亚欧交汇处，是贸易战略要地，长时间属于罗马帝国和拜占庭帝国，同时也是亚欧两大帝国的争夺区域。而爱琴海沿岸的文明就是古代丝绸之路的终点。</p><h3 id="第二、三、四章–信仰与宗教"><a href="#第二、三、四章–信仰与宗教" class="headerlink" title="第二、三、四章–信仰与宗教"></a>第二、三、四章–信仰与宗教</h3><h4 id="关于罗马帝国的一些补充"><a href="#关于罗马帝国的一些补充" class="headerlink" title="关于罗马帝国的一些补充"></a>关于罗马帝国的一些补充</h4><ol><li><p>罗马帝国（公元前27-到1453），在395分裂为东西两个帝国，其中西罗马（395-476）只存在了81年，而东罗马一直到1453年才灭亡。</p></li><li><p>戴克里先的改革：在293年戴克里先实施四帝共治，将帝国分为东西部各设立一个“奥古斯都”（正帝），再各任命一个“凯撒”（副帝）。而已经统一西部的君士坦丁大帝就在323年彻底击败了东部的奥古斯都李锡尼，成为了唯一的统治者。<img src="https://img-blog.csdnimg.cn/3c69a98109974acd8f997c6ec28b670e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="「你必以此而胜」（Εν Τούτῳ Νίκα）"></p></li><li><p>君士坦丁大帝与基督教：在此之前，基督教一直是罗马帝国所禁止与迫害的宗教，直到君士坦丁大帝在一统西部的时候突然皈依，之后又向全境开始推行。也就是大约这时，耶路撒冷被指定为了帝国的宗教心脏。</p></li><li><p>东西罗马的分裂：在君士坦丁大帝去世后，王位继承经历了数十年的争夺最后在短暂的统一后分裂为东西两个帝国。<br><img src="https://img-blog.csdnimg.cn/57d3cb3ce9a042e5a43e434213fae0b0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_30,color_FFFFFF,t_70" alt="公元395年的罗马帝国；罗马帝国自这一年由狄奥多西的两个儿子分治后，再未能实现统一"></p></li></ol><h4 id="波斯与罗马之间的恩怨与宗教之争"><a href="#波斯与罗马之间的恩怨与宗教之争" class="headerlink" title="波斯与罗马之间的恩怨与宗教之争"></a>波斯与罗马之间的恩怨与宗教之争</h4><p>&emsp;&emsp;最开始宗教是通过符合当地的习俗来抢地盘的，但是后来随着宗教的影响越来越大，它成为了帝王们巩固统治的手段之一。萨珊王朝最鼎盛时期开始通过巩固琐罗亚斯德教强化了帝国复兴与军国主义的观念。这个结局就是：波斯帝国的疯狂扩张是伴随着强大的价值与信仰体系进行的，但是加剧了宗教间的矛盾最后演变成了屠杀与迫害。而基督教在波斯的渗透又让琐罗亚德斯教派感到恐惧，于是更加排挤基督教以及其它宗教。也许这种方式对于自身的统治有利，但在扩张的领土上禁止其它宗教，就成为一种暴行的代名词。有人开始对基督教进行深入研究，认为这是对波斯的反抗。<br>&emsp;&emsp;在罗马宣布基督教的合法性之后，这种冲突愈演愈烈，基督教已经象征着罗马对波斯的入侵。罗马与波斯的矛盾看似已经不可调和，但随着气候变化带来的蝴蝶效应，这一切随之改变。<img src="https://img-blog.csdnimg.cn/854fad374fd04167831cb16ebcf27ccd.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="宗教的传播"><br>&emsp;&emsp;言而总之，总而言之随着上帝之鞭的入侵，西罗马的辉煌付之一炬。东罗马帝国也因为基督教的教义发生过争执与冲突，基督教越来越成为一种政治手段。而波斯帝国在经历匈奴的入侵后逐渐转变对于基督教的态度，当然由于萨珊国王个人的喜爱让波斯终止了数百年对于基督教徒的迫害，波斯摇身一变成为了基督教在亚洲的捍卫者。多多少少从我们现在的眼光来看有些可笑与荒唐，宗教俨然已经超出了信仰的范围，生活在无神论的国家里真的很难理解这些宗教的发展与历史，在我看来它一直是一种工具罢了。<br><img src="https://img-blog.csdnimg.cn/c28c2f20be5940fda2e1ae09a9e92257.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70"></p><p>&emsp;&emsp;接下来的很多年，波斯与拜占庭的交火从未停歇过，趁着拜占庭帝国陷入北方游牧民族战争的旋涡，萨珊波斯落井下石，进攻叙利亚和埃及，波斯人甚至多次兵临君士坦丁堡他们组成了波斯-阿瓦尔人-斯拉夫联盟。<br>&emsp;&emsp;而西突厥与萨珊波斯争夺中亚控制权，敌人的敌人就是朋友，于是形成了西突厥-拜占庭联盟，也多次威胁到了波斯的统治。</p><h4 id="阿拉伯人的崛起"><a href="#阿拉伯人的崛起" class="headerlink" title="阿拉伯人的崛起"></a>阿拉伯人的崛起</h4><p><img src="https://img-blog.csdnimg.cn/011dfdb8e4204b139492a2c746b65804.png" alt="阿拉伯建筑"><br>&emsp;&emsp;如果说我生活在那个年代，看待穆罕穆德的故事时，我也觉得那确实是真主的使者。作为一个文盲没读过书的人、一个原本赶骆驼的人，凭借自己的智慧以及自己过人的（忽悠）能力，当然还有军事政治能力就和开挂了一样，一统阿拉伯世界。<br>&emsp;&emsp;所有的反抗都源于压迫，由于波斯与罗马的博弈，身处麦加的阿拉伯部落失去了商道，经济受挫，贸易中断。但是伴随着穆哈默德的横空出世，最终阿拉伯人统一了阿拉伯半岛。<br>&emsp;&emsp;如果有机会一定去了解一下伊斯兰教的教义，从书中的只言片语也能感觉到一个政权如果拥有了坚定的信仰是多么的可怕。伊斯兰教的扩张在一开始靠的是温和与包容。书中也写道了穆哈默德曾经求助于犹太人，并且曾也被犹太人视为救世主。（在千年前同源同宗的人们现在却是水火不容）面对基督徒伊斯兰教开始也显现了极大的宽容，当然这看起来是十分明智的手段，利用宗教的矛盾博取一方信任。甚至伊斯兰教甚至颁布了公约保障其它教派的权益。<br><img src="https://img-blog.csdnimg.cn/a6e218832703409a812b0b739051920d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="夸张的进军速度"><br>&emsp;&emsp;总之，阿拉伯人最终灭亡波斯，甚至横过直布罗陀海峡，占领了西班牙地区。定都巴格达的阿拉伯政权当时已经所向披靡，加之控制了整个商道以及东西方的贸易，富裕奢华成为了那里的象征。这也带来了丝绸之路的有一次繁荣。</p><blockquote><p>一位中国的旅行家杜环记录了巴格达空前的建筑规模:“郛郭之内,里阳之中,土地所生,无物不有。四方辐辏,万货丰贱,锦绣珠贝,满于市肆。驼马驴骡,充于街巷。”<br>（ps：唐天宝十年（751），随高仙芝在怛逻斯城（又名呾逻私城，今哈萨克斯坦江布尔）与大食（阿拉伯帝国）军作战被俘，其后曾游历西亚、北非，成为第一个到过非洲并有著作的中国人。<br>宝应初年（762）乘商船回国，写了《经行记》一书，惜已失传，惟杜佑的《通典》（801年成书）引用此书，有1500余字保留至今。<br>《经行记》是中国最早记载伊斯兰教义和中国工匠在大食传播生产技术的古籍，还记录了亚非若干国家的历史、地理、物产和风俗人情。）</p></blockquote><p>&emsp;&emsp;对比于欧洲的低靡、对学术研究的蔑视，阿拉伯人才是追求思想开放、求知欲强、慷慨大度的。这也确实刷新了自己的认知，虽然曾经了解过一些阿拉伯人的贡献，但我们总会把现在的阿拉伯世界的印象带入进去，文化的繁荣与进步离不开国力的昌盛，现在也是亦然。</p><blockquote><p>穆斯林的征服行动创造了一种新的世界秩序，以及一个自信、开<br>放、热衷发展的经济巨人。繁盛富足，没有政敌，没有宗教对手，这是<br>一个真正的、靠着讲规矩就能取胜的地方，一片商人能够致富、智者得<br>到尊重、异见可以陈述和争论的世界。麦加山洞中那个毫不起眼的开<br>端，居然孕育出一个全球性、多样化的乌托邦。</p></blockquote><p>&emsp;&emsp;这是当时的阿拉伯世界，不知道如今纷争的中东人是如何看待祖上们的辉煌的，也许他们的古兰经中的真主并没有告诉他们答案。</p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 丝绸之路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【读书笔记】《丝绸之路》（一）---丝绸之路的诞生</title>
      <link href="/2021/08/22/20210822/"/>
      <url>/2021/08/22/20210822/</url>
      
        <content type="html"><![CDATA[<h1 id="【读书笔记】《丝绸之路》第一章——丝绸之路的诞生"><a href="#【读书笔记】《丝绸之路》第一章——丝绸之路的诞生" class="headerlink" title="【读书笔记】《丝绸之路》第一章——丝绸之路的诞生"></a>【读书笔记】《丝绸之路》第一章——丝绸之路的诞生</h1><hr><p>&emsp;&emsp;在理工科的学校中往往都充斥着对于缺少人文气息的诟病，久而久之生活在了一种“人文气息焦虑中”，所以这次选择了一本历史类的大部头，这本在16年畅销的《丝绸之路》。作为一个对于中东历史一窍不通的人来说，又是一本需要边查资料便阅读的著作，希望可以读完它吧。<br><img src="https://img-blog.csdnimg.cn/b15af74e1bf04a76b9a91655dd231343.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70#pic_center" alt="蛮厚的一本书"></p><hr><h2 id="开始阅读的准备"><a href="#开始阅读的准备" class="headerlink" title="开始阅读的准备"></a>开始阅读的准备</h2><p>&emsp;&emsp;最开始我以为这本书的视角是横亘欧亚大陆的丝绸之路，通过前言发现作者主要是聚焦于“<strong>千年来，连接着欧洲与太平洋、坐落在东西方之间的那块区域</strong>”。各国的历史总喜欢在课程上聚焦本国或者本文化的历史，中东的历史甚至在我学过的历史课中连一笔带过的机会都没有。也许我们总会用今天的视角审视历史，如今的中东在我的脑海中就是极端、宗教冲突、混乱的代名词，我的潜意识里就告诉自己也许那里自古以来都是这样：昏暗闭塞、未经开化。似乎那里的地图在我脑海中永远都是一片空白。</p><p>&emsp;&emsp;所以在阅读时实在是对于这些陌生的地名无从在脑海里构建它们的位置所在。所以打算一边查阅资料一边完成对于这本书的阅读，于是便将文章分为笔记与感想两部分。</p><h2 id="笔记部分"><a href="#笔记部分" class="headerlink" title="笔记部分"></a>笔记部分</h2><p><img src="https://img-blog.csdnimg.cn/7a2c89f195ee4264a7d1aabe7756d379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="一些奇奇怪怪的地名"></p><p>&emsp;&emsp;翻了翻书上第一幅地图看起来真的是什么地方都不认识，以前所讲的两河流域也是今天知道具体在哪。先看看书上那些我听过但是又很陌生的名词们：</p><h3 id="1-美索不达米亚的纷争与统一"><a href="#1-美索不达米亚的纷争与统一" class="headerlink" title="1. 美索不达米亚的纷争与统一"></a>1. 美索不达米亚的纷争与统一</h3><p>&emsp;&emsp;美索不达米亚：本意就是两条河流之间的地方，在今天的伊拉克地区。B.C.3200的苏美尔人在这里发明了楔形文字。(然后查了资料才发现金闪闪（吉尔伽美什）原来就是苏美尔人，其真实身份为古代美索不达米亚地区苏美尔早王朝的都市国家乌鲁克的第五任国王，人类最古老的史诗《吉尔伽美什史诗》的主人公，人类史最古老的“英雄王”。)</p><p><img src="https://img-blog.csdnimg.cn/b8ce66c4fb8b4baebfd18b2ecb742ad5.png"><br><img src="https://img-blog.csdnimg.cn/a2b70a463c904a30850cc3a8da89f1eb.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="乌鲁克王朝"></p><p>&emsp;&emsp; 这么来看的话吉尔伽美什就是乌鲁克时期的，而所谓的古巴比伦王国是阿摩利人建立的，其中有名的汉谟拉比法典便出自于国王之手，之后经历了血雨腥风的争霸阶段，<br><img src="https://img-blog.csdnimg.cn/5c1a173b9a8b40ed94a73199d60deef1.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70#pic_center" alt="古巴比伦"><br>由亚述人完成了第一次大一统（似乎是第一个统一的集权王朝），但是亚述人穷兵黩武，很快便被新巴比伦推翻“空中花园”是是新巴比伦时期的产物（公元前550左右），之后便是居鲁士（大流士）二世征服了几乎整个近东地区，建立了阿契美尼德王朝（波斯第一帝国），要不是温泉关与马拉松战役的失败他差一点征服了希腊。<br><img src="https://img-blog.csdnimg.cn/31536d8f0be6451293354193e8627576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="大一统之后的波斯"><br>&emsp;&emsp; 翻了翻中国这会基本刚刚进入战国时期，而此时的波斯已经完成了大一统。</p><h3 id="2-亚历山大大帝的东征与塞琉古帝国的建立："><a href="#2-亚历山大大帝的东征与塞琉古帝国的建立：" class="headerlink" title="2.亚历山大大帝的东征与塞琉古帝国的建立："></a>2.亚历山大大帝的东征与塞琉古帝国的建立：</h3><p>&emsp;&emsp; 至少在今天阅读整个这一段历史之前，我一直对于来自于欧洲的这位帝王，出征的距离与战争的规模没有直观的认知。<img src="https://img-blog.csdnimg.cn/0373a3fa47bf4bb0aaa03c44cddfa2b0.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="亚历山大的东征"><br>&emsp;&emsp; 从马其顿打到近东地区再征服波斯帕米尔高原脚下调转车头征服印度河流流域，这一段距离基本是从新疆要一直打到东北再绕个圈子。很难想象这是需要多么宏大的野心与能力。无论西方人如何美化这一段历史，但是亚历山大能在短短几十年时间疯狂扩张领土、兼并不同语言不同文化的国家并且一直作战，足见他不仅仅是雄才大略的军事家更是一个出色的管理者政治家。<br><img src="https://img-blog.csdnimg.cn/dd10c95108824ad0bf7fe75a5495ad9b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="不知道为什么想放这张图，不过两个相聚3000多年的征服者凑在一起有种说不出的感觉"></p><p>&emsp;&emsp;虽然亚历山大帝国随着他的死亡转眼烟消云散一分为四，他的部下塞琉古在西亚与中亚地区建立了塞琉古帝国，但是随着亚历山大东征带来的西亚文化却不是转瞬即逝的。哪怕远在印度河谷也可以看到希腊文化的影响，作者举例了佛像的出现与对阿波罗崇拜的关系便可以看出。</p><h3 id="3-中国的雄心与丝绸之路的初成"><a href="#3-中国的雄心与丝绸之路的初成" class="headerlink" title="3.中国的雄心与丝绸之路的初成"></a>3.中国的雄心与丝绸之路的初成</h3><p>&emsp;&emsp; 终于写到了自己熟悉的历史，多年与匈奴的战争与进贡换来的和平让汉武帝感到厌倦，由守转攻在前119年打通了河西走廊。这对于雄踞中原的大国而言就是打开了新世界的大门。到现在我也很难想象从长安出发的丝绸是如何离开玉门关、横过塔克拉玛干、翻越帕米尔再经过伊朗高原直到美索不达米亚平原的，这种商品的流通必定是巨大利润的驱使。<br><img src="https://img-blog.csdnimg.cn/43d4869ef1b546d6bbe87cb45693502f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="大汉的疆域"></p><h3 id="4-罗马的购买力与丝绸之路的繁荣"><a href="#4-罗马的购买力与丝绸之路的繁荣" class="headerlink" title="4.罗马的购买力与丝绸之路的繁荣"></a>4.罗马的购买力与丝绸之路的繁荣</h3><p>&emsp;&emsp; 又是一段陌生的历史（对于罗马帝国的建立是真的没有经历深究了，也许以后有时间可以补充看看），简而言之在罗马征服埃及之后，通过赋税而来的巨大的财政收入，有钱了就有购买力嘛。罗马的富裕阶层在看到来自西亚以及中国的异域风情与奇珍异宝之后便陷入了疯狂的追求，为了东方的奢侈品每一年有一半的铸币流入东方市场，以换取奢侈品。如此巨大的交易规模自然使得沿线经济的迅速繁荣发展。</p><p>&emsp;&emsp; 在这里插入以下塞琉古帝国之后的故事，由于塞琉古帝国定都叙利亚，对于印度与中亚地区的控制逐渐衰弱，再加上托勒密帝国（埃及地区）的入侵，最终印度地区独立成立了孔雀王朝，中亚的巴克特里亚（中国称“大夏”）独立与伊朗的安息也相继独立。公元前64年，塞琉古帝国在安息帝国和罗马帝国的夹击下灭亡。<br><img src="https://img-blog.csdnimg.cn/24dcef9a9179431489888f8ef7cd3717.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="夹在大汉与罗马之间的安息帝国"><br>&emsp;&emsp; 当然罗马也曾经向安息发动过大大小小很多进攻，但是交战没有阻碍经济的发展，反倒使得波斯同时完善了东西的交通运输。富庶的波斯挡住了罗马的进攻，而罗马也不曾再出现亚历山大这样的人物。随后萨珊波斯取代了安息，建立了波斯第二帝国，在这时波斯的繁荣达到了顶峰。<br><img src="https://img-blog.csdnimg.cn/25671ff6045849618e5c2f5b909f7601.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70#pic_center" alt="不同空间的同一时期"></p><h2 id="一些问题与想法"><a href="#一些问题与想法" class="headerlink" title="一些问题与想法"></a>一些问题与想法</h2><ol><li><p>为什么我的印象中西亚都是缺水的荒漠，怎么会诞生如此灿烂的文明？在《圣经》记载伊甸园在东方，有四条河从伊甸之地流出并滋润园里，这四条河分别是幼发拉底河、底格里斯河、基训河和比逊河。<br><img src="https://img-blog.csdnimg.cn/01cdb2827e1c4cc69e385ee194386ec2.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="emmm看起来应该是这样"><br><img src="https://img-blog.csdnimg.cn/7c5260c9dd4e402f904c0b4c4a42acad.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="现在是这样（伊拉克首都巴格达）"><br>&emsp;&emsp; 查阅了相关资料发现是主要由于气候变化的原因以及人们过度对于两河流域开发所造成的，有时候在想同一纬度的我国两河流域也曾经是文化的发源地，而现在华夏文明依旧存在，也挺奇妙的。</p></li><li><p>现在可以影响世界的阿拉伯半岛为什么没有其它文化在当时繁荣？下章会讲，当然地理上是因为气候过于干旱。“阿拉伯半岛位置闭塞，水源匮乏，沙漠较多，只分布着零星的绿洲，长期与世隔绝，无人问津。军事帝国和商业城邦无法存在于这样的环境，因此阿拉伯人结成部落，互相照应，以游牧和劫掠为主要谋生手段，有时还给波斯帝国和罗马帝国充当雇佣军。”所以阿拉伯在当时是被归为游牧民族当中的。</p></li><li><p>不得不承认，这个阅读刷新了我对于中东地区的认识，原来在夏商周时期的美索不达米亚，文明就已经到达了那样的高度，甚至战国时期古波斯还完成过大一统，甚至难以相信佛像的出现居然和希腊文化的侵入有一定联系。远在罗马的作家会因为新买到的丝绸送给心上人又完成一部不朽的著作，而传入中国那些带有“胡”字的植物又是对文明的发展造成了怎么样的影响，我们大可以按照自己的理解在脑海中重现这一段历史。<br>&emsp;最近新闻中关于阿富汗动荡的新闻占据了大部分时间，而伊朗、伊拉克、叙利亚那些曾经辉煌过的地方如今也是千疮百孔。时间给他们开了一个大大的玩笑，有人说历史最怕的是被遗忘，两河流域的古文明不知道已经被时间战乱与纷争磨损了篡改了多少。</p></li></ol><hr><p>&emsp;&emsp;就先这样了吧，先尝试这样记录。晚安。<br><img src="https://img-blog.csdnimg.cn/a640baa9148147fa8a49bd5a66c64316.png"></p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 丝绸之路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【读书笔记】《活着》余华</title>
      <link href="/2021/08/16/title/"/>
      <url>/2021/08/16/title/</url>
      
        <content type="html"><![CDATA[<h1 id="【读书笔记】《活着》余华"><a href="#【读书笔记】《活着》余华" class="headerlink" title="【读书笔记】《活着》余华"></a>【读书笔记】《活着》余华</h1><p><img src="https://img-blog.csdnimg.cn/345e389583ac4dc180bf0bfe0749f7b8.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70"></p><hr><p> &emsp;&emsp; 不知道有多久没有写过读后感了，可能从高三语文开始复习起就再也没有写过读后感了，开个坑记录以下，看看自己在之后的一年里能够读完多少书。<br>2021.8.16</p><hr><p><img src="https://img-blog.csdnimg.cn/61d8d9daab22484bab35b4fbcbd72adb.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="活着"></p><p>&emsp;&emsp;这本书是一本不需要书签的书，12点睡不着的时候拿起来的，读完的时候也只不过4点出头。读完整个故事之后有一口气堵在心口，是一种压抑的感觉。跟着一个第一人称的视角走完福贵的一生之后，有种说不出的惆怅感。“眼看他起高楼，眼看他宴宾客，眼看他楼塌了”，而福贵曾经的高楼塌了一辈子。</p><p>&emsp;&emsp;在我接触到的作品里似乎以生命为主题的都是在歌颂人们在苦难中为了活着而做出改变的勇气，而这本小说在前言中就这样写道：“<strong>人是为了活着本身而活着，而不是为了活着之外的任何事物活着</strong>。”</p><p>&emsp;&emsp;抛去文字对于苦难感人至深的描述，对于福贵努力挣扎生活的刻画，这本书就讲了为了本身活着而活着的事情。不妨想一想我在看这本书之前到底在想我为什么要活着：也许是我相信活着是为了诗和远方一样的理想，也许是我一直相信“功不唐捐”这个源自于佛教用语—佛不唐捐这样无谓的因果，甚至也许是曾经无数的故事告诉我，人的一生应该充实应该投身于一番事业，而现在碌碌无为的你不活着对得起人世的一遭吗？…</p><p>&emsp;&emsp;所以看完整个故事，我又在想如果活着已经注定了这悲惨的一切，为什么福贵还要努力活着？</p><p>&emsp;&emsp;恰巧最近看完了JOJO的第五部黄金之风，最后的结局里荒木的神来之笔将滚石篇看似突兀的插入，滚石所雕刻的三人就是在未来会牺牲的三人，就算米斯达想阻止但命运依旧无情碾过，所以旁白中写道“所谓命运，<img src="https://img-blog.csdnimg.cn/8c1e6cfba502475fbf62ff3c36180dc4.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="注定的悲剧已经写好"><br>是沉睡的奴隶”，布加拉提无论如何都改变不了8天后的悲剧。对于余华笔下的福贵也是亦然，他悲惨的命运经注定，而他带来的震撼我们的地方是在沉睡的奴隶面前他选择活着。</p><p>&emsp;&emsp;JOJO的故事更像是一种宿命论，而《活着》更像是在说宿命之下的我们到底如何去面对活着这个事情。</p><p>&emsp;&emsp;当你发现付出不一定有回报，善良不一定会被祝福，人生注定迈入一个又一个的低谷时，能否告诉自己我不为了理想、不为了希望、不为了打破宿命而活着，我就是因为我来了所以我活着，这恐怕就是这本书想告诉我们的。</p><p>&emsp;&emsp;<strong>人是为了活着本身而活着，而不是为了活着之外的任何事物活着</strong>这里看来多多少少有些虚无主义的感觉。我想余华先生洋洋洒洒上万字没有在宣扬这个。我们活着可以为了理想、可以相信因果、可以迎来柳暗花明的一刻，但这些都是在我们活着的前提下存在的，是我们人为附加的价值，倘若某天我们骤然发现在命运的枷锁前，这些都是我们臆想的东西，倘若我们发现我们的命运始终就如同西西弗斯与那块石头一样，再怎样挣扎也无济于事时，<strong>这时，剥去我们层层附加给活着的华丽的冠冕堂皇的理由时，我们能够活下去最本质的理由就是活着。</strong><br>&emsp;&emsp;这些便是我浅尝辄止的想法罢了。对我而言我似乎理解了，但似乎又没有明白所以然。</p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 活着 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【摸鱼】bupt自动打卡--利用github action自动部署的自动打卡程序</title>
      <link href="/2021/08/06/title3/"/>
      <url>/2021/08/06/title3/</url>
      
        <content type="html"><![CDATA[<h1 id="【摸鱼】bupt自动打卡–利用github-action自动部署的自动打卡程序"><a href="#【摸鱼】bupt自动打卡–利用github-action自动部署的自动打卡程序" class="headerlink" title="【摸鱼】bupt自动打卡–利用github action自动部署的自动打卡程序"></a>【摸鱼】bupt自动打卡–利用github action自动部署的自动打卡程序</h1><hr><p><img src="https://img-blog.csdnimg.cn/1bd4d235cbd74ab3b53416e9bc5d804e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70"></p><h2 id="1、Github账号注册"><a href="#1、Github账号注册" class="headerlink" title="1、Github账号注册"></a>1、Github账号注册</h2><p>emmm这个年头注册账号应该都没有什么问题吧<br>ps：github是不需要科学上网的，如果你打不开可以考虑开vpn，一般多刷新几次就可以打开了。</p><h2 id="2、部署程序"><a href="#2、部署程序" class="headerlink" title="2、部署程序"></a>2、部署程序</h2><h3 id="2-1使用我的模板Use-this-template"><a href="#2-1使用我的模板Use-this-template" class="headerlink" title="2.1使用我的模板Use this template"></a>2.1使用我的模板Use this template</h3><p>点击这里—&gt;<a href="https://github.com/SaberrExcalibur/bupt_auto">我的仓库的连接</a><br><img src="https://img-blog.csdnimg.cn/8b4d3f4edc2b46fe95e077856545499d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="bupt_auto的页面"><br>你会看到如上页面，然后点击里面的<code>Use this template </code>,那个绿色的玩意<br>然后进入页面按照图片上的填写<br><img src="https://img-blog.csdnimg.cn/c22bc11c40084c32b07fbf16aa0a69ac.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>等待一下就可以用这个模板了。</p><h2 id="2-2设置学号与密码"><a href="#2-2设置学号与密码" class="headerlink" title="2.2设置学号与密码"></a>2.2设置学号与密码</h2><p>点击右上的<code>setting</code><br><img src="https://img-blog.csdnimg.cn/9ce944b934ac494a84f7eed610b38451.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>点击<code>Secrets</code>，之后点击新建规则<code>New repository secret</code><br><img src="https://img-blog.csdnimg.cn/a64811cb10464388ad765d9ecffff976.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在<code>name</code>中输入BUPT_USERNAME<br>在<code>value</code>中输入你的学号<br><img src="https://img-blog.csdnimg.cn/3b6e67ecb6c74e5aab73cd6b5dbcefec.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>之后点击<code>Add secret</code><br>同理再新建一个规则，在<code>name</code>中输入BUPT_PASSWORD<br>在<code>value</code>中输入你的学号对应的密码（信息门户的密码）</p><p>确认后应该长这样<br><img src="https://img-blog.csdnimg.cn/311d3a11afef484c852eb0bd32c6699b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2-3运行与部署"><a href="#2-3运行与部署" class="headerlink" title="2.3运行与部署"></a>2.3运行与部署</h3><p>之后这个程序将会自动部署，几分钟内会给你的注册邮箱发送一封邮件告诉你是否成功。如果你不放心，可以在<code>Action</code>中查看运行状态，一旦你改动了其中的配置请在这里点击<code>Re-run job</code><br><img src="https://img-blog.csdnimg.cn/47fda5a96e5643fabb3ca7b1129252d1.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>当然你还可以在<code>checker</code>的<code>Run Script</code>中查看填报信息<br><img src="https://img-blog.csdnimg.cn/4721b3657001403ebe6bd5b4d11b906b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2-4其它配置"><a href="#2-4其它配置" class="headerlink" title="2.4其它配置"></a>2.4其它配置</h3><p>你可以在<code>.github/workflows/main.yml</code>文件中设置运行时间</p><pre class=" language-bash"><code class="language-bash">name: Automatically submit the 2019-nCoV report sheet of BUPTon:  schedule:    - cron: <span class="token string">"0 0 * * *"</span>  push:</code></pre><p>格式是标准的 cron 格式，第一个数字代表分钟，第二个数字代表小时。<br>如需更改可以<a href="https://blog.csdn.net/lhch102/article/details/79354069?depth_1-">点击连接</a>学习core格式的规范</p><h2 id="3、感谢"><a href="#3、感谢" class="headerlink" title="3、感谢"></a>3、感谢</h2><p>感谢大佬 imtsuki提供模板，希望疫情早日结束<br>该文章仅供学习参考。<br><img src="https://img-blog.csdnimg.cn/3f7708e7701a4d2194c171b3bb17690e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70"></p>]]></content>
      
      
      <categories>
          
          <category> 摸鱼 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 自动部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【钢琴谱】原神：宵宫角色PV——「鸣神岛夏天的象征」钢琴谱</title>
      <link href="/2021/08/06/title2/"/>
      <url>/2021/08/06/title2/</url>
      
        <content type="html"><![CDATA[<h1 id="【钢琴谱】原神：宵宫角色PV——「鸣神岛夏天的象征」钢琴谱"><a href="#【钢琴谱】原神：宵宫角色PV——「鸣神岛夏天的象征」钢琴谱" class="headerlink" title="【钢琴谱】原神：宵宫角色PV——「鸣神岛夏天的象征」钢琴谱"></a>【钢琴谱】原神：宵宫角色PV——「鸣神岛夏天的象征」钢琴谱<img src="https://img-blog.csdnimg.cn/1ca3dc3c7ac7409283f8ecea68d7879a.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="宵宫"></h1><hr><h2 id="一些小想法"><a href="#一些小想法" class="headerlink" title="一些小想法"></a>一些小想法</h2><p>&emsp;&emsp;非常喜欢宵宫这个角色，所以无聊之余扒谱了pv鸣神岛夏天的象征的曲子，感觉。参考了凉空dalao的编曲，加了一些低音部分的修饰，减少了左手的滚动。曲子中间的修饰音符一直没有找准节奏，只能这也糊弄过去了。<br>&emsp;&emsp;在翻看评论时看见了游戏中“逆流的飞星”就是指宵宫在夏夜的烟花，jio的说的很有道理，就像这首曲一直在上升一样吧。<br><img src="https://img-blog.csdnimg.cn/5e8f11ce10a94d9a87d025d819d74285.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="十连必出"></p><h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><p><a href="https://www.bilibili.com/video/BV1hq4y1n7rX/">我顺便做成了一个视频上传到了b站</a></p><h2 id="钢琴谱png"><a href="#钢琴谱png" class="headerlink" title="钢琴谱png"></a>钢琴谱png</h2><p><img src="https://img-blog.csdnimg.cn/1b547102d40e455f881814bf96221ea3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="1"><br><img src="https://img-blog.csdnimg.cn/4a8fe1c713a845e8a400ed242dc1e0a9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="2"></p><h2 id="midi文件与pdf文件"><a href="#midi文件与pdf文件" class="headerlink" title="midi文件与pdf文件"></a>midi文件与pdf文件</h2><p>在<a href="https://pan.baidu.com/s/1uMh_Pflkt7ES0Slfay3_iQ">百度云盘</a>连接中，提取码：1234</p>]]></content>
      
      
      <categories>
          
          <category> 钢琴谱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 钢琴谱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【读书笔记】《集异壁之大成》读书笔记与杂谈（一）</title>
      <link href="/2021/08/04/2021-08-03/"/>
      <url>/2021/08/04/2021-08-03/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p><img src="https://img-blog.csdnimg.cn/54ceccffa27048c6a9f15a93a63ce02e.jpg#pic_center" alt="《集异壁之大成》"></p><p>&emsp;&emsp;为何选择这本书：高中的暑假在家闲来无事，在书架上寻觅拿起了这本后入字典的书，仅仅是前言部分就让我兴趣大增。“螃蟹卡农”，“鬼与曹丞相”的翻译让我着实大开眼界。当然随手翻几页，艾舍尔的板画（以前不知道出自于哪里）与里面独具一格的对音乐的穿插讲解令我痴迷。但由于学业压力这本书在书桌上放了3年我也再没有仔细翻开阅读，大学选择了与计算机有关的专业，且这本书恰好是一本与计算机有很大关联的大部头，并且里面不仅有计算机相关的内容还包含了生物，音乐等相关内容，那种融会贯通、万千河流汇集于一处的感觉，这本书可谓是正中我的下怀，这便是下定决心开始阅读的原因。借此机会我想记录阅读时自己的见解与查阅的资料，以便日后翻阅。【由于专业原因略去所有数学内容，因为根本看不懂】</p><h1 id="导言"><a href="#导言" class="headerlink" title="导言"></a>导言</h1><h2 id="关于翻译"><a href="#关于翻译" class="headerlink" title="关于翻译"></a>关于翻译</h2><p>&emsp;&emsp;这本书的中文版前言是作者侯世达亲自撰写的，在阅读前言看到这个“集异壁”的翻译方式的时候，里面解释了书名—“GEB”是哥德尔、艾舍尔、巴赫三人的名字首字母，而中文同音的这三个字以各自所蕴含的意思又确实可以概括这本书的内容主题。人们都说翻译本身就是一个二次创作的过程，而遵循翻译需要的是严复所强调的三个层次——信达雅，作者解释了翻译中遇到的难题，是直译“没有气泡的可乐”还是意译“没有辣子的川菜”更好呢。这两个风马牛不相及的语句却在不同的文化中产生了相同的意义，真可谓一绝。对于中国读者而言（九十年代几乎没人知道可乐的情况下）当然是后者更符合信达雅。</p><h2 id="音乐的奉献——听觉的怪圈"><a href="#音乐的奉献——听觉的怪圈" class="headerlink" title="音乐的奉献——听觉的怪圈"></a>音乐的奉献——听觉的怪圈</h2><p>&emsp;&emsp;开篇便以巴赫《音乐的奉献》引入了一个主题——循环与怪圈，首先时是巴洛克时期（1600-1750）的音乐风格便是复调。<br><img src="https://img-blog.csdnimg.cn/e51d452fb3ce4c4cb4cc7e011954d256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="巴赫"></p><p>   &emsp;&emsp;先谈一谈<strong>复调</strong>：由一个音乐主题旋律为开始，在不同的高低音域上重复，变化并且在相互重叠中产生和谐进而使得各个声部叠加交织在一起。我个人理解是当时由于人们逐渐完善了最基础的音乐系统。必然人们要开始追寻更进一步的东西了，单一的旋律和高低差的音等等都已经不能够满足需求了。那么伴随着进步，人们必然就要开始探索更多更复杂的形式，便有了复调。</p><p>   &emsp;&emsp;接下来就是巴赫在曲子中运用的复调技巧——<strong>卡农</strong>与<strong>赋格</strong>：卡农的形式是以一个声部的旋律开始，由另一个或者另几个声部进行模仿，同一个旋律依次进入各个声部当中然后上下交叠（而且形成和谐和声效果）。而另一方面来说，如果在进入结尾的时候，每个声部的旋律进行到末尾时又回到开始的话，再重复几遍就形成了“无穷卡农”。而赋格：其基本特点是运用模仿对位法，使一个简单的而富有特性的主题在乐曲的各声部轮流出现一次（呈示部）；然后进入以主题中部分动机发展而成的插段，此后主题及插段又在各个不同的新调上一再出现（展开部）；直至最后主题再度回到原调（再现部），并常以尾声结束。<br>   <img src="https://img-blog.csdnimg.cn/5defaa7693534276824832f496c355d4.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="完美循环"></p><p>   &emsp;&emsp;为什么会用音乐引出，那便是其中一首无穷升高卡农中一直转调升高，但它在不断地转调后有回到原调号，自然而然没有任何突兀的地方。这是第一个怪圈。</p><h2 id="关于艾舍尔的画——视觉的怪圈"><a href="#关于艾舍尔的画——视觉的怪圈" class="headerlink" title="关于艾舍尔的画——视觉的怪圈"></a>关于艾舍尔的画——视觉的怪圈</h2><p>   &emsp;&emsp;我觉得这是这三个人中最直观的怪圈，怪圈概念中所隐含的是无穷概念，循环就是一种以有穷的方式表示无休止过程的方法。<img src="https://img-blog.csdnimg.cn/dd856eaf7f4547d1adffa5fbe8f06606.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="艾舍尔作品《瀑布》石版画，1961年"></p><h2 id="关于哥德尔——逻辑的怪圈"><a href="#关于哥德尔——逻辑的怪圈" class="headerlink" title="关于哥德尔——逻辑的怪圈"></a>关于哥德尔——逻辑的怪圈</h2><p>   &emsp;&emsp;这里的内容就是我的道行不够，首先我觉得作者想提出哥德尔是想引入悖论（恕我才疏学浅，哥德尔不完备定理我是真的看不懂）这个不完备大概就是说:emmm一个数学系统假设有abcd四条定理中总有一个定理不可被另外两个定理证明，要想证明得跳出系统，用系统外的玩意证明。而这个哥德尔胆很壮，他直接说这个现存的数学系统（数论）是不完备的。（数论的所有一致性公理化系统都包含不可判定的命题），这里的怪圈是什么——如何证明一个数论陈述是针对数本身的描述，而不是它对于自身的描述？我的理解就是，我论证我自己。这里便也形成了一个<strong>怪圈</strong>。<br>      &emsp;&emsp;当然书里面举的关于自指性的例子更好说明问题：</p><blockquote><p>下面这个句子是假的；<br>    上面这个句子是真的。</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集异璧之大成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo+GithubPage搭建博客】搭建与部署（一）</title>
      <link href="/2021/08/04/title1/"/>
      <url>/2021/08/04/title1/</url>
      
        <content type="html"><![CDATA[<h1 id="【Hexo-GithubPage搭建博客】搭建与部署（一）"><a href="#【Hexo-GithubPage搭建博客】搭建与部署（一）" class="headerlink" title="【Hexo+GithubPage搭建博客】搭建与部署（一）"></a>【Hexo+GithubPage搭建博客】搭建与部署（一）</h1><hr><p>&emsp;<font color="#999AAA"> 开通博客的第一篇文章，就打算写一下hexo+github的新手教程，权当熟悉一下Markdown语法。权当假期无聊，自娱自乐吧。<br><font color="#999AAA"><br>&emsp;环境: Hexo 4.3.0<br>&emsp;&emsp;&ensp;    &ensp; node 14.17.14<br>&emsp;&emsp;&ensp;    &ensp; git &emsp; 2.32.0<br></font></font></p><hr><span id="more"></span><h2 id="1-Hexo的搭建"><a href="#1-Hexo的搭建" class="headerlink" title="1.Hexo的搭建"></a>1.Hexo的搭建</h2><h3 id="1-1安装Node-js"><a href="#1-1安装Node-js" class="headerlink" title="1.1安装Node.js"></a>1.1安装Node.js</h3><p> <a href="https://nodejs.org/en/download/">Node.js官网</a><br> 选择合适的版本安装即可,建议选择LTS稳定版<br><img src="https://img-blog.csdnimg.cn/img_convert/f1a0f0aecc7caf1f359b3020987aa329.png" alt="Alt"><br> 之后无脑next即可,在cmd中查看node.js版本</p><pre><code>node --version </code></pre><h3 id="2-2-安装Git"><a href="#2-2-安装Git" class="headerlink" title="2.2 安装Git"></a>2.2 安装Git</h3><p> <a href="https://git-scm.com/download/">Git官网</a><br> <img src="https://img-blog.csdnimg.cn/2019101521150237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MjQzOTMw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p> 之后无脑next即可</p><h3 id="2-3-安装Hexo"><a href="#2-3-安装Hexo" class="headerlink" title="2.3 安装Hexo"></a>2.3 安装Hexo</h3><ol><li>在你需要安装Hexo的目录下(比如blog文件下)右键点击<code>Git Bash Here</code>：</li><li> 安装Hexo<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo </code></pre></li><li>如果安装缓慢或失败，可以尝试淘宝源<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org</code></pre></li><li>检查是否安装成功</li></ol><pre class=" language-bash"><code class="language-bash">hexo -version</code></pre><p><img src="https://img-blog.csdnimg.cn/104a82f986664ae6b07799245aa6c9f5.png#pic_center" alt="在这里插入图片描述"></p><ol start="5"><li>初始化</li></ol><pre class=" language-bash"><code class="language-bash">hexo init</code></pre><ol start="6"><li>安装js的软件包仓库</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span>   </code></pre><ol start="7"><li>执行生成</li></ol><pre class=" language-bash"><code class="language-bash">hexo g</code></pre><p><img src="https://img-blog.csdnimg.cn/2ac059cfbbec44b6adb05d591690f921.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="8"><li>启动本地服务</li></ol><pre class=" language-bash"><code class="language-bash">hexo s</code></pre><p><img src="https://img-blog.csdnimg.cn/4ae19eabc7334e95ab3fedf302b96ba8.png" alt="在这里插入图片描述"></p><ol start="9"><li>之后 在<a href="http://localhost:4000/">http://localhost:4000</a> 就可以查看了：<br><img src="https://img-blog.csdnimg.cn/4b5846c57e534e8c93307bc6b7d4eb15.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ol><hr><h2 id="2-Github-Page的搭建"><a href="#2-Github-Page的搭建" class="headerlink" title="2.Github Page的搭建"></a>2.Github Page的搭建</h2><h3 id="2-1注册GitHub"><a href="#2-1注册GitHub" class="headerlink" title="2.1注册GitHub"></a>2.1注册GitHub</h3><p>这都1202年了应该没有人不会注册吧</p><h3 id="2-2创建仓库"><a href="#2-2创建仓库" class="headerlink" title="2.2创建仓库"></a>2.2创建仓库</h3><p><img src="https://img-blog.csdnimg.cn/5ff7943fd80447b384f834fd20d67543.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注意下图蓝色框中<code>Repository name</code>，一定要填写你的Github名字加上<code>.github.io</code><br>否则无法访问，比如我的Github叫<code>SaberrExcalibur</code>,我这里就填写<code>SaberrExcalibur.github.io </code>,其它就按照框内填写就行，最后点击<code>Creat Repository</code><br><img src="https://img-blog.csdnimg.cn/6f6e09810f76443495c736d95a29315c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><h2 id="3-部署到GitHub服务器"><a href="#3-部署到GitHub服务器" class="headerlink" title="3.部署到GitHub服务器"></a>3.部署到GitHub服务器</h2><h3 id="3-1GithubSSH设置"><a href="#3-1GithubSSH设置" class="headerlink" title="3.1GithubSSH设置"></a>3.1GithubSSH设置</h3><ol><li>安装git后可以找到gitbash.exe的启动方式<br><img src="https://img-blog.csdnimg.cn/8adc058eabdb475584e5cc9270aad4ea.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>之后输入<code>ssh-keygen -t rsa -C &quot;你的邮箱&quot;</code>，回车确定<br><img src="https://img-blog.csdnimg.cn/61be843b9586484e83f4f6f098c6fc33.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>记住这里绿色框中的文件位置<br><img src="https://img-blog.csdnimg.cn/a01152f9bbf94dcb8eb1d2de65ccbec9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>找到用记事本打开，记住里面的SHH密钥。</li><li>在github的<code>setting</code>中找到<code>SSH and GPG keys</code>,在<code>title</code>中填写你的github名称，在<code>key</code>中填写刚才的SHH密钥<br><img src="https://img-blog.csdnimg.cn/06315dd798db440a843e7a4bc4483610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>完成后可以看到<br><img src="https://img-blog.csdnimg.cn/ba38bda81f164d3cae85a9105a7353f9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h3 id="3-2配置-config-yml文件"><a href="#3-2配置-config-yml文件" class="headerlink" title="3.2配置_config.yml文件"></a>3.2配置_config.yml文件</h3></li><li>用一款合适的编译器打开在安装博客的地方的_config.yml文件<br><img src="https://img-blog.csdnimg.cn/1ef7ba82fd564b14bf28c74e6e36e7f4.png#pic_center?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>修改<code>url</code><br><img src="https://img-blog.csdnimg.cn/0bbde52ccccb45c4a73fecdc16e91438.png#pic_left" alt="在这里插入图片描述"></li></ol><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#修改为自己的username</span><span class="token comment" spellcheck="true">#http://username.github.io </span>url: http://你自己的username.github.io </code></pre><ol start="3"><li>修改<code>deploy</code><br><img src="https://img-blog.csdnimg.cn/7ce8221ad3a64968be31322129522a5b.png" alt="在这里插入图片描述"></li></ol><pre class=" language-bash"><code class="language-bash">deploy:    type: <span class="token function">git</span>    <span class="token comment" spellcheck="true">#这里的username填你自己的仓库地址</span>    repo: https://github.com/SaberrExcalibur/SaberrExcalibur.github.io.git     branch: main</code></pre><p>注意仓库地址可以在下图位置复制<br><img src="https://img-blog.csdnimg.cn/2aae4048b0bd4c7aac77d976293a1bc0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="3"><li>保存文件_config.yml后需要提前安装一个扩展hexo-deployer-git，不然可能出现错误，无法部署成功。<br>进入安装博客的文件夹下执行：</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre><p><img src="https://img-blog.csdnimg.cn/7ba064495c6541d5bcfb1850dc5d8f21.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-3部署到github"><a href="#3-3部署到github" class="headerlink" title="3.3部署到github"></a>3.3部署到github</h3><p>执行命令</p><pre class=" language-bash"><code class="language-bash">hexo cleanhexo g <span class="token comment" spellcheck="true"># hexo generate 也行</span>hexo d <span class="token comment" spellcheck="true"># hexo deploy 也行</span></code></pre><p>之后打开你自己的<code>http://username.github.io </code>网站，大功告成！<br><img src="https://img-blog.csdnimg.cn/68edbf78470c496e9f6eceb9d268d21a.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiYXJqaHo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这是配置了一堆主题后的效果</p><hr>]]></content>
      
      
      <categories>
          
          <category> 搭建博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
